{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/add-new-contact/add-new-contact.component.css","webpack:///./src/app/add-new-contact/add-new-contact.component.html","webpack:///./src/app/add-new-contact/add-new-contact.component.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/contact-list/contact-list.component.css","webpack:///./src/app/contact-list/contact-list.component.html","webpack:///./src/app/contact-list/contact-list.component.ts","webpack:///./src/app/contact.service.ts","webpack:///./src/app/models/contact-list.ts","webpack:///./src/app/models/contact.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"\"","module.exports = \"<p>\\n  add-new-contact works!\\n</p>\\n\"","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-add-new-contact',\n  templateUrl: './add-new-contact.component.html',\n  styleUrls: ['./add-new-contact.component.css']\n})\nexport class AddNewContactComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\n\nimport { ContactListComponent } from './contact-list/contact-list.component';\n\nconst routes: Routes = [\n  { path: '', redirectTo: '/contact-list', pathMatch: 'full' },\n  { path: 'contact-list', component: ContactListComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }","module.exports = \"\"","module.exports = \"\\n  <router-outlet></router-outlet>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\n\nimport { AppComponent } from './app.component';\nimport { AddNewContactComponent } from './add-new-contact/add-new-contact.component';\nimport { ContactListComponent } from './contact-list/contact-list.component';\nimport { AppRoutingModule } from './/app-routing.module';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nimport { HttpModule } from '@angular/http';\nimport { FormsModule } from '@angular/forms';\n@NgModule({\n  declarations: [\n    AppComponent,\n    AddNewContactComponent,\n    ContactListComponent\n  ],\n  imports: [\n    BrowserModule,\n    AppRoutingModule,\n    FormsModule,\n    HttpModule,\n    ReactiveFormsModule\n  ],\n  providers: [],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","module.exports = \"/* HeroesComponent's private CSS styles */\\r\\n.selected {\\r\\n    background-color: #CFD8DC !important;\\r\\n    color: white;\\r\\n  }\\r\\n.contacts {\\r\\n    margin: 0 0 2em 0;\\r\\n    list-style-type: none;\\r\\n    padding: 0;\\r\\n    width: 15em;\\r\\n  }\\r\\n.contacts li {\\r\\n    cursor: pointer;\\r\\n    position: relative;\\r\\n    left: 0;\\r\\n    background-color: #EEE;\\r\\n    margin: .5em;\\r\\n    padding: .3em 0;\\r\\n    height: 1.6em;\\r\\n    border-radius: 4px;\\r\\n  }\\r\\n.contacts li.selected:hover {\\r\\n    background-color: #BBD8DC !important;\\r\\n    color: white;\\r\\n  }\\r\\n.contacts li:hover {\\r\\n    color: #607D8B;\\r\\n    background-color: #DDD;\\r\\n    left: .1em;\\r\\n  }\\r\\n.contacts .text {\\r\\n    position: relative;\\r\\n    top: -3px;\\r\\n  }\\r\\n.contacts .badge {\\r\\n    display: inline-block;\\r\\n    font-size: small;\\r\\n    color: white;\\r\\n    padding: 0.8em 0.7em 0 0.7em;\\r\\n    background-color: #607D8B;\\r\\n    line-height: 1em;\\r\\n    position: relative;\\r\\n    left: -1px;\\r\\n    top: -4px;\\r\\n    height: 1.8em;\\r\\n    margin-right: .8em;\\r\\n    border-radius: 4px 0 0 4px;\\r\\n  }\\r\\n.margin10px{\\r\\n    margin-right: 10px;\\r\\n  }\\r\\n.marginTop25px{\\r\\n      margin-top: 25px;\\r\\n  }\"","module.exports = \"<div class=\\\"modal fade\\\" id=\\\"myModal\\\" role=\\\"dialog\\\">\\n    <div class=\\\"modal-dialog\\\">\\n    \\n      <!-- Modal content-->\\n      <div class=\\\"modal-content\\\" >\\n        <div class=\\\"modal-header\\\">\\n          <button type=\\\"button\\\" class=\\\"close\\\" data-dismiss=\\\"modal\\\">&times;</button>\\n          <h4 class=\\\"modal-title\\\">{{title}} Contact</h4>\\n        </div>\\n        <div class=\\\"modal-body\\\">\\n            <!-- <form [formGroup]=\\\"contactForm\\\" (ngSubmit)=\\\"onContactFormSubmit()\\\">\\n                <table>\\n                  <tr><td>Enter firstName</td><td><input formControlName=\\\"firstName\\\">\\n                  <label *ngIf=\\\"contactForm.get('firstName').invalid && processValidation\\\" [ngClass] = \\\"'error'\\\"> Firstname is required. </label>\\n                  </td></tr>\\n                  <tr><td>Enter lastName</td><td><input formControlName=\\\"lastName\\\">\\n                  <label *ngIf=\\\"contactForm.get('lastName').invalid && processValidation\\\" [ngClass] = \\\"'error'\\\"> Lastname is required. </label>\\n                  </td></tr>\\t\\n                  <tr><td colspan=\\\"2\\\">\\n                  <button *ngIf=\\\"!contactIdToUpdate\\\">CREATE</button>  \\n                  <button *ngIf=\\\"contactIdToUpdate\\\">UPDATE</button>  \\n                  <button (click)=\\\"backToCreateArticle()\\\" *ngIf=\\\"contactIdToUpdate\\\">Go Back</button>  \\n                  </td></tr>\\n                </table>\\n               </form>  -->\\n            <form [formGroup]=\\\"contactForm\\\">\\n                \\n                  <div class=\\\"form-group\\\">\\n                    <label>First Name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"name\\\" [(ngModel)]=\\\"firstName\\\">\\n                    <p class=\\\"errorMessage text-danger\\\" *ngIf=\\\"contactForm.controls.name.errors && contactForm.controls.name.dirty \\\">Please provide first name.</p>\\n                  </div>\\n              \\n                  <div class=\\\"form-group\\\">\\n                    <label>Last Name</label>\\n                    <input type=\\\"text\\\" class=\\\"form-control\\\" formControlName=\\\"lname\\\" [(ngModel)]=\\\"lastName\\\">\\n                    <p class=\\\"errorMessage text-danger\\\" *ngIf=\\\"contactForm.controls.lname.errors && contactForm.controls.lname.dirty \\\">Please provide last name.</p>\\n                  </div>\\n              \\n                 <div class=\\\"form-group\\\">\\n                  <label>Email</label>\\n                  <input type=\\\"email\\\" class=\\\"form-control\\\" formControlName=\\\"emailId\\\" [(ngModel)]=\\\"email\\\">\\n                    <p class=\\\"errorMessage text-danger\\\" *ngIf=\\\"contactForm.controls.emailId.errors && contactForm.controls.emailId.dirty \\\">Please provide email.</p>                    \\n                </div>\\n              \\n                <div class=\\\"form-group\\\">\\n                  <label>Phone Number</label>\\n                  <input type=\\\"text\\\"\\n                         class=\\\"form-control\\\" formControlName=\\\"pnumber\\\" [(ngModel)]=\\\"phoneNumber\\\">\\n                </div>\\n                <div class=\\\"modal-footer\\\">\\n                  <button type=\\\"button\\\" class=\\\"btn btn-default\\\" data-dismiss=\\\"modal\\\" #closeBtn>Close</button>\\n                  <button type=\\\"submit\\\" (click)=\\\"saveContact()\\\" [disabled]=\\\"!contactForm.valid\\\" class=\\\"btn btn-primary\\\">Save</button>\\n                </div>\\n              </form>\\n              <!-- <pre>{{contactForm.value | json}}</pre> -->\\n        </div>\\n      \\n      </div>\\n    </div>\\n</div>\\n  \\n<div class=\\\"container\\\">   \\n  <div class=\\\"row\\\">\\n    <div class=\\\"col-lg-3\\\">\\n    </div>\\n    <div class=\\\"col-lg-6\\\">\\n\\n    <h2 class=\\\"text-center\\\">Contact List</h2> \\n    </div>\\n    <div class=\\\"col-lg-3\\\">\\n    <button id=\\\"add-btn\\\" class=\\\"btn btn-primary btn-md mt-4 marginTop25px\\\" data-toggle=\\\"modal\\\" data-target=\\\"#myModal\\\" (click)=\\\"addContact()\\\">Add Contact</button>       \\n    </div>\\n  </div>\\n    <table class=\\\"table\\\">\\n      <thead>\\n        <tr>\\n          <th></th>\\n          <th>Firstname</th>\\n          <th>Lastname</th>\\n          <th>Email</th>\\n          <th>Contact</th>\\n          <th>Actions</th>\\n        </tr>\\n      </thead>\\n      <tbody>\\n        <tr *ngFor=\\\"let contact of contacts; let i = index\\\">\\n          <td>{{i+1}}</td>\\n          <td>{{contact.firstName}}</td>\\n          <td>{{contact.lastName}}</td>\\n          <td>{{contact.email}}</td>\\n          <td>{{contact.phoneNumber}}</td>\\n          <td><button id=\\\"btn{{i}}\\\" class=\\\"glyphicon glyphicon-trash margin10px\\\" data-target=\\\"#myModal\\\" (click)=\\\"deleteContact(contact.email)\\\"></button>\\n            <button id=\\\"btn{{i}}\\\" class=\\\"glyphicon glyphicon-pencil\\\" [hidden]=\\\"true\\\" aria-hidden=\\\"true\\\" data-toggle=\\\"modal\\\" data-target=\\\"#myModal\\\" (click)=\\\"editContact(contact.id)\\\"></button>\\n          </td>\\n        </tr>\\n      </tbody>\\n    </table>\\n  </div>\\n  \"","import { Component, OnInit, ViewChild,ElementRef } from '@angular/core';\nimport { FormControl, FormGroup, Validators, FormBuilder } from '@angular/forms';\nimport { CONTACTS } from '../models/contact-list';\nimport { Contact } from '../models/contact';\nimport { ContactService } from '../contact.service';\n@Component({\n  selector: 'contact-list',\n  templateUrl: './contact-list.component.html',\n  styleUrls: ['./contact-list.component.css']\n})\nexport class ContactListComponent implements OnInit {\n  public contacts: any = [];\n  statusCode: number;\n  requestProcessing = false;\n  contactIdToUpdate = null;\n  processValidation = false;\n\n   //Create form\n   contactForm = new FormGroup({\n  \n});\n  public contact = new Contact();\n  public selectedContact : Contact;\n  title :string;\n  id: number;  \n  firstName: string = \"\";  \n  lastName:string = \"\";\n  email:string = \"\";\n  phoneNumber:number;\n  isNewContat:boolean;\n  \n  \n  @ViewChild('closeBtn') closeBtn: ElementRef;\n  heroForm: FormGroup;\n  constructor(private contactService: ContactService, private fb: FormBuilder) {\n     this.createForm();\n   }\n  ngOnInit() {\n    this.getContacts();\n  }\n  createForm() {\n    this.contactForm = this.fb.group({\n      name: ['', Validators.required ],\n      lname: ['', Validators.required ],\n      emailId: ['', Validators.required ],\n      pnumber:[''],\n    });\n\n    // this.contactForm = new FormGroup({\n    //   'name': new FormControl(this.contacts.name, [\n    //     Validators.required\n    //   ])\n    // });\n  }\n\n  getContacts(): void {\n    this.contactService.getContacts()\n      .subscribe(\n        data => this.contacts = data,\n        errorCode =>  this.statusCode = errorCode);\n  }\n\n  // onSelect(email : string){\n  //   this.contactService.getContact(email)\n  //      .subscribe(res => \n  //     {\n  //       debugger;\n  //       this.selectedContact = res;\n  //     })\n  // }\n  deleteContact(contactEmail) {\n    const index: number = this.contacts.findIndex(contact => contact.email == contactEmail);\n    if (index !== -1) {\n        this.contacts.splice(index, 1);\n    }        \n}\neditContact(id)\n{\n  debugger;\n  this.title = \"Edit\";\n  this.isNewContat = false;\n  this.id = id;\n  this.contactService.getContact(id)\n  .subscribe(res => \n {\n   debugger;\n   this.contact = res;\n   this.firstName = this.contact.firstName;\n   this.lastName = this.contact.lastName;\n   this.email = this.contact.email;\n   this.phoneNumber = this.contact.phoneNumber;\n })\n}\n\naddContact()\n{\n  this.isNewContat= true;\n  this.title = \"Add\";\n  this.contact = new Contact();\n  this.firstName=\"\";\n  this.lastName=\"\";\n  this.email=\"\";\n  this.phoneNumber= null;\n  \n}\nsaveContact()\n{\n\n  if (this.contactForm.valid) {\n    console.log('form submitted');\n    if(!this.isNewContat)\n      {\n        for (var i = 0; i < this.contacts.length; i++) {\n          if(this.contacts[i].email == this.email)\n            {\n              this.setData();\n              this.contacts[i] = this.contact;\n            }\n      }\n  \n  \n      }\n      else{\n       this.setData();\n       this.contacts.push(this.contact);\n      }\n  } else {\n    // validate all form fields\n    Object.keys(this.contactForm.controls).forEach(field => { // {1}\n      const control = this.contactForm.get(field);            // {2}\n      control.markAsTouched({ onlySelf: true });       // {3}\n    });\n  }\n  \n  \nthis.closeBtn.nativeElement.click();\n}\n\nsetData()\n{\n  this.contact.id = this.contacts.length + 1;\n  this.contact.firstName = this.firstName;\n  this.contact.lastName = this.lastName;\n  this.contact.email = this.email;\n  this.contact.phoneNumber = this.phoneNumber;\n}\n}\n","import { Injectable } from '@angular/core';\nimport { Http, Response, Headers, URLSearchParams, RequestOptions } from '@angular/http';\nimport 'rxjs/Rx';\nimport { map } from \"rxjs/operators\";\nimport { Observable } from 'rxjs/Observable'\nimport { Contact } from './models/contact';\nimport { CONTACTS } from './models/contact-list';\nimport { of } from \"rxjs\";\n\n@Injectable({ providedIn: 'root' })\nexport class ContactService {\n\n//   //URL for CRUD operations\n//   contactUrl = \"http://localhost:3000/contacts\";\n\n  constructor(private http:Http) { }\n\n  getContacts(): Observable<Contact[]> {\n    // TODO: send the message _after_ fetching the heroes\n    return of(CONTACTS);\n  }\n\n  addContact(contact:Contact): Observable<Contact[]> {\n    debugger;\n    CONTACTS.concat(contact);\n    return of(CONTACTS);\n  }\n\n\n  getContact(id: number): Observable<Contact> {\n    // TODO: send the message _after_ fetching the hero\n    return of(CONTACTS.find(contact => contact.id === id));\n  }\n\n  //Fetch all articles\n//   getAllContatcs(): Observable<Contact[]> {\n//     return this.http.get(this.contactUrl).map(this.extractData).catch(this.handleError);\n//   }\n// }\n// //Create article\n// createContact(article: Contact):Observable<number> {\n// let cpHeaders = new Headers({ 'Content-Type': 'application/json' });\n//     let options = new RequestOptions({ headers: cpHeaders });\n//     return this.http.post(this.contactUrl, article, options)\n//            .map(success => success.status)\n//            .catch(this.handleError);\n// }\n// //Fetch article by id\n// getContactById(articleId: string): Observable<Contact> {\n// let cpHeaders = new Headers({ 'Content-Type': 'application/json' });\n// let options = new RequestOptions({ headers: cpHeaders });\n// console.log(this.contactUrl +\"/\"+ articleId);\n// return this.http.get(this.contactUrl +\"/\"+ articleId)\n//  .map(this.extractData)\n//  .catch(this.handleError);\n// }\n// //Update article\n// updateContact(contact: Contact):Observable<number> {\n// let cpHeaders = new Headers({ 'Content-Type': 'application/json' });\n//     let options = new RequestOptions({ headers: cpHeaders });\n//     return this.http.put(this.contactUrl +\"/\"+ contact.id, contact, options)\n//            .map(success => success.status)\n//            .catch(this.handleError);\n// }\n// //Delete article\n// deleteArticleById(articleId: string): Observable<number> {\n// let cpHeaders = new Headers({ 'Content-Type': 'application/json' });\n// let options = new RequestOptions({ headers: cpHeaders });\n// return this.http.delete(this.contactUrl +\"/\"+ articleId)\n//      .map(success => success.status)\n//            .catch(this.handleError);\n// }\n// private extractData(res: Response) {\n// let body = res.json();\n//     return body;\n// }\n// private handleError (error: Response | any) {\n// console.error(error.message || error);\n// return Observable.throw(error.status);\n// }\n\n}","import { Contact } from './contact';\r\nexport const CONTACTS: Contact[] = [\r\n  { id: 1,firstName: 'Varun', lastName: 'Verma', email: 'Varun@gmail.com', phoneNumber: 9898989888, status: true },\r\n  { id: 2,firstName: 'Suraj', lastName: 'Patil', email: 'Suraj@gmail.com', phoneNumber: 9888985888, status: true },\r\n  { id: 3,firstName: 'Viresh', lastName: 'Mehta', email: 'Viresh@gmail.com', phoneNumber: 8998989888, status: true },\r\n  { id: 4,firstName: 'Nikhil', lastName: 'Kande', email: 'Nikhil@gmail.com', phoneNumber: 7898989888, status: true }\r\n];","export class Contact {\r\n    id:number;\r\n    firstName: string;\r\n    lastName: string;\r\n    email: string;\r\n    phoneNumber: number;\r\n    status: boolean;\r\n}","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}